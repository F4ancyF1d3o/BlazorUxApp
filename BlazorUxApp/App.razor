@page "/"

@*
    Aplicación de Demostración de Patrones de UI y UX en Blazor
    Versión Final Definitiva con Todas las Correcciones.
*@

<div class="min-h-screen bg-gray-100 dark:bg-gray-900 font-sans">
    <div class="@(navigationMode == NavigationMode.Vertical ? "lg:flex" : "")">
        @if (navigationMode == NavigationMode.Vertical)
        {
            @VerticalNav
        }
        else
        {
            @HorizontalNav
        }
        
        <main class="flex-1 p-4 sm:p-6 md:p-8 flex flex-col">
            <div class="max-w-7xl mx-auto w-full flex flex-col flex-grow">
                
                <div class="mb-6 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md flex items-center justify-between flex-shrink-0">
                    <h1 class="text-2xl font-bold text-blue-600 dark:text-blue-400">Panel de Visualización de Datos</h1>
                    <button @onclick="ToggleNavigationMode" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg shadow-sm transition-transform transform hover:scale-105">
                        Cambiar a Navegación @(navigationMode == NavigationMode.Vertical ? "Horizontal" : "Vertical")
                    </button>
                </div>

                <div id="content-panel" class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 sm:p-6 text-gray-900 dark:text-gray-100 flex-grow flex flex-col">
                    @switch (activeView)
                    {
                        case "master-detail":
                            @MasterDetailView
                            break;
                        case "data-table":
                            @DataTable
                            break;
                        case "card-layout":
                            @CardLayout
                            break;
                        case "chart-view":
                            @ChartView
                            break;
                        case "tabbed-view":
                            @TabbedView
                            break;
                        case "filterable-table":
                            @FilterableTable
                            break;
                        default:
                            <p class="text-center">Selecciona una vista del menú de navegación.</p>
                            break;
                    }
                </div>
            </div>
        </main>
    </div>
</div>

@code {
    // --- Modelos de Datos ---
    public class User { public int Id { get; set; } public string Name { get; set; } = string.Empty; public string Email { get; set; } = string.Empty; public string Bio { get; set; } = string.Empty; public string AvatarUrl { get; set; } = string.Empty; }
    public class Product { public int Id { get; set; } public string Name { get; set; } = string.Empty; public string Category { get; set; } = string.Empty; public decimal Price { get; set; } public int Stock { get; set; } }
    public class NewsArticle { public int Id { get; set; } public string Title { get; set; } = string.Empty; public string Summary { get; set; } = string.Empty; public string ImageUrl { get; set; } = string.Empty; public string Category { get; set; } = string.Empty; }
    public class MonthlySale { public string Month { get; set; } = string.Empty; public decimal Revenue { get; set; } }
    public enum NavigationMode { Vertical, Horizontal }

    // --- Estado de la Aplicación ---
    private NavigationMode navigationMode = NavigationMode.Vertical;
    private string activeView = "master-detail";
    private string activeTab = "perfil";
    private string searchTerm = "";

    // --- Colecciones de Datos ---
    private List<User> users = new();
    private User? selectedUser;
    private List<Product> products = new();
    private List<NewsArticle> articles = new();
    private List<MonthlySale> salesData = new();
    private List<Product> allProductsForFilter = new();
    private IEnumerable<Product> FilteredProducts => string.IsNullOrWhiteSpace(searchTerm) ? allProductsForFilter : allProductsForFilter.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || p.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    // --- Métodos de Interacción ---
    private void SetActiveView(string viewName) => activeView = viewName;
    private void ToggleNavigationMode() => navigationMode = navigationMode == NavigationMode.Vertical ? NavigationMode.Horizontal : NavigationMode.Vertical;
    private void SelectUser(User user) => selectedUser = user;
    private void SetActiveTab(string tabName) => activeTab = tabName;

    // --- Ciclo de Vida: Inicialización ---
    protected override void OnInitialized()
    {
        users = new List<User> { new User { Id = 1, Name = "Ana Torres", Email = "ana.torres@example.com", Bio = "Desarrolladora Frontend con 5 años de experiencia en React y Blazor. Apasionada por el diseño de interfaces limpias, usables y accesibles.", AvatarUrl = "https://placehold.co/100x100/A8D5E2/333333?text=AT" }, new User { Id = 2, Name = "Carlos Ruiz", Email = "carlos.ruiz@example.com", Bio = "Ingeniero de Software especializado en .NET y Azure. Experto en arquitecturas de microservicios y computación en la nube.", AvatarUrl = "https://placehold.co/100x100/F9A826/333333?text=CR" }, new User { Id = 3, Name = "Sofía Gómez", Email = "sofia.gomez@example.com", Bio = "Manager de Proyectos con certificación PMP. Lidera equipos ágiles para la entrega de productos de software de alta calidad.", AvatarUrl = "https://placehold.co/100x100/FF8C94/333333?text=SG" }, new User { Id = 4, Name = "Javier Peña", Email = "javier.pena@example.com", Bio = "Analista de Datos y experto en SQL y Power BI. Transformo datos crudos en información valiosa para la toma de decisiones.", AvatarUrl = "https://placehold.co/100x100/7FBCB4/333333?text=JP" } };
        selectedUser = users.First();
        products = new List<Product> { new Product { Id = 101, Name = "Laptop Pro X 15\"", Category = "Electrónica", Price = 1250.50m, Stock = 35 }, new Product { Id = 102, Name = "Smartphone Z-11", Category = "Electrónica", Price = 799.99m, Stock = 150 }, new Product { Id = 103, Name = "Silla Ergonómica Pro", Category = "Oficina", Price = 250.00m, Stock = 80 }, new Product { Id = 104, Name = "Cafetera Automática Deluxe", Category = "Hogar", Price = 150.75m, Stock = 25 }, new Product { Id = 105, Name = "Monitor Curvo UltraWide 34\"", Category = "Electrónica", Price = 450.00m, Stock = 60 }, new Product { Id = 106, Name = "Mancuernas Ajustables 20kg", Category = "Deportes", Price = 120.00m, Stock = 95 }, new Product { Id = 107, Name = "El Silmarillion (Tapa Dura)", Category = "Libros", Price = 35.50m, Stock = 110 }, };
        articles = new List<NewsArticle> { new NewsArticle { Id = 1, Title = "Blazor United: El Futuro del Desarrollo .NET", Summary = "Explora las mejoras en rendimiento y las nuevas capacidades de renderizado unificado.", ImageUrl = "https://picsum.photos/600/400?random=1", Category = "Tecnología" }, new NewsArticle { Id = 2, Title = "Guía de Viaje: Descubre las Montañas Rocosas", Summary = "Un recorrido por los paisajes más impresionantes, rutas de senderismo y consejos.", ImageUrl = "https://picsum.photos/600/400?random=2", Category = "Viajes" }, new NewsArticle { Id = 3, Title = "Principios de Diseño UX/UI para Aplicaciones Modernas", Summary = "Descubre las tendencias de diseño que dominarán el próximo año y cómo aplicarlas.", ImageUrl = "https://picsum.photos/600/400?random=3", Category = "Diseño" }, };
        salesData = new List<MonthlySale> { new MonthlySale { Month = "Ene", Revenue = 15000 }, new MonthlySale { Month = "Feb", Revenue = 22000 }, new MonthlySale { Month = "Mar", Revenue = 18000 }, new MonthlySale { Month = "Abr", Revenue = 27000 }, new MonthlySale { Month = "May", Revenue = 32000 }, new MonthlySale { Month = "Jun", Revenue = 25000 }, new MonthlySale { Month = "Jul", Revenue = 35000 }, new MonthlySale { Month = "Ago", Revenue = 41000 }, new MonthlySale { Month = "Sep", Revenue = 38000 }, new MonthlySale { Month = "Oct", Revenue = 45000 }, new MonthlySale { Month = "Nov", Revenue = 55000 }, new MonthlySale { Month = "Dic", Revenue = 75000 }, };
        allProductsForFilter = new List<Product> { new Product { Id = 101, Name = "Laptop Pro X 15\"", Category = "Electrónica", Price = 1250.50m, Stock = 35 }, new Product { Id = 102, Name = "Smartphone Z-11", Category = "Electrónica", Price = 799.99m, Stock = 150 }, new Product { Id = 103, Name = "Silla Ergonómica Pro", Category = "Oficina", Price = 250.00m, Stock = 80 }, new Product { Id = 104, Name = "Cafetera Automática Deluxe", Category = "Hogar", Price = 150.75m, Stock = 25 }, new Product { Id = 105, Name = "Monitor Curvo UltraWide 34\"", Category = "Electrónica", Price = 450.00m, Stock = 60 }, new Product { Id = 106, Name = "Mancuernas Ajustables 20kg", Category = "Deportes", Price = 120.00m, Stock = 95 }, new Product { Id = 107, Name = "El Silmarillion (Tapa Dura)", Category = "Libros", Price = 35.50m, Stock = 110 }, new Product { Id = 108, Name = "Teclado Mecánico RGB", Category = "Electrónica", Price = 95.00m, Stock = 200 }, new Product { Id = 109, Name = "Escritorio Elevable Eléctrico", Category = "Oficina", Price = 380.00m, Stock = 45 }, new Product { Id = 110, Name = "Purificador de Aire Inteligente", Category = "Hogar", Price = 199.99m, Stock = 70 } };
    }

    // --- RenderFragments (Definiciones de las Vistas) ---
    private RenderFragment VerticalNav =>
        @<aside class="w-full lg:w-64 bg-white dark:bg-gray-800 lg:h-screen lg:sticky top-0 shadow-xl">
            <div class="p-6">
                <h2 class="text-2xl font-extrabold text-blue-600 dark:text-blue-400">Blazor UX</h2>
                <p class="text-sm text-gray-500 dark:text-gray-400">Patrones de UI</p>
            </div>
            <nav class="mt-4 px-2">
                @{
                    var navLinks = new Dictionary<string, (string name, string icon)> { { "master-detail", ("Maestro-Detalle", "M") }, { "data-table", ("Tabla de Datos", "T") }, { "card-layout", ("Tarjetas (Cards)", "C") }, { "chart-view", ("Gráfico Simple", "G") }, { "tabbed-view", ("Pestañas (Tabs)", "P") }, { "filterable-table", ("Tabla Filtrable", "F") } };
                    foreach (var link in navLinks)
                    {
                        var isActive = activeView == link.Key;
                        var finalClasses = $"flex items-center w-full px-4 py-3 my-1 rounded-lg transition-all duration-200 {(isActive ? "bg-blue-500 text-white shadow-md scale-105" : "text-gray-600 dark:text-gray-300 hover:bg-blue-100 dark:hover:bg-gray-700 hover:text-blue-600 dark:hover:text-white transform hover:translate-x-2")}";
                        <button @onclick="() => SetActiveView(link.Key)" class="@finalClasses"><span class="flex items-center justify-center h-8 w-8 text-lg font-bold rounded-full bg-gray-200 dark:bg-gray-600 mr-3">@link.Value.icon</span><span class="font-semibold">@link.Value.name</span></button>
                    }
                }
            </nav>
        </aside>;

    private RenderFragment HorizontalNav =>
        @<header class="w-full bg-white dark:bg-gray-800 shadow-lg sticky top-0 z-10">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between h-16">
                    <div class="flex items-center"><h2 class="text-2xl font-extrabold text-blue-600 dark:text-blue-400">Blazor UX</h2></div>
                    <nav class="hidden md:flex space-x-2">
                        @{
                            var navLinks = new Dictionary<string, string> { { "master-detail", "Maestro-Detalle" }, { "data-table", "Tabla" }, { "card-layout", "Tarjetas" }, { "chart-view", "Gráfico" }, { "tabbed-view", "Pestañas" }, { "filterable-table", "Filtro" } };
                            foreach (var link in navLinks)
                            {
                                var isActive = activeView == link.Key;
                                var finalClasses = $"px-3 py-2 rounded-md text-sm font-medium transition-colors {(isActive ? "bg-blue-500 text-white" : "text-gray-600 dark:text-gray-300 hover:bg-blue-100 dark:hover:bg-gray-700")}";
                                <button @onclick="() => SetActiveView(link.Key)" class="@finalClasses">@link.Value</button>
                            }
                        }
                    </nav>
                </div>
            </div>
        </header>;

    private RenderFragment MasterDetailView =>
        @<section class="flex flex-col h-full">
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-blue-500 pb-2 flex-shrink-0">Patrón: Maestro-Detalle</h3>
            <div class="flex flex-col md:flex-row gap-6 flex-grow">
                <div class="w-full md:w-1/3"><ul class="space-y-2">@foreach (var user in users){ <li @key="user.Id"><button @onclick="() => SelectUser(user)" class="@($"w-full text-left p-3 rounded-lg cursor-pointer transition-all {(selectedUser?.Id == user.Id ? "bg-blue-500 text-white shadow" : "bg-gray-100 dark:bg-gray-700 hover:bg-blue-100 dark:hover:bg-gray-600")}")">@user.Name</button></li>}</ul></div>
                <div class="w-full md:w-2/3">@if (selectedUser != null){ <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-inner h-full"><div class="flex items-center gap-4"><img src="@selectedUser.AvatarUrl" alt="Avatar de @selectedUser.Name" class="w-24 h-24 rounded-full border-4 border-blue-400 object-cover" /><div><h4 class="text-2xl font-bold">@selectedUser.Name</h4><p class="text-blue-500 dark:text-blue-400">@selectedUser.Email</p></div></div><p class="mt-4 text-gray-800 dark:text-gray-200 leading-relaxed">@selectedUser.Bio</p></div> }</div>
            </div>
        </section>;

    private RenderFragment DataTable =>
        @<section class="flex flex-col h-full">
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-green-500 pb-2 flex-shrink-0">Patrón: Tabla de Datos</h3>
            <div class="overflow-auto rounded-lg shadow-md flex-grow">
                <table class="w-full min-w-max text-sm text-left">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-300 sticky top-0">
                        <tr><th scope="col" class="px-6 py-3">ID</th><th scope="col" class="px-6 py-3">Nombre</th><th scope="col" class="px-6 py-3">Categoría</th><th scope="col" class="px-6 py-3 text-right">Precio</th><th scope="col" class="px-6 py-3 text-right">Stock</th></tr>
                    </thead>
                    <tbody>@foreach (var product in products){ <tr @key="product.Id" class="bg-white dark:bg-gray-800 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"><td class="px-6 py-4 font-medium text-gray-900 dark:text-white">@product.Id</td><td class="px-6 py-4 text-gray-900 dark:text-gray-100">@product.Name</td><td class="px-6 py-4"><span class="@($"px-2 py-1 text-xs font-semibold rounded-full {(product.Category == "Electrónica" ? "bg-blue-100 text-blue-800" : (product.Category == "Oficina" ? "bg-green-100 text-green-800" : (product.Category == "Hogar" ? "bg-yellow-100 text-yellow-800" : (product.Category == "Deportes" ? "bg-red-100 text-red-800" : "bg-indigo-100 text-indigo-800"))))}")">@product.Category</span></td><td class="px-6 py-4 text-right text-gray-900 dark:text-gray-100">@product.Price.ToString("C")</td><td class="px-6 py-4 text-right @(product.Stock < 50 ? "text-red-500 font-bold" : "text-green-500")">@product.Stock</td></tr> }</tbody>
                </table>
            </div>
        </section>;

    private RenderFragment CardLayout =>
        @<section>
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-purple-500 pb-2">Patrón: Diseño de Tarjetas (Cards)</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">@foreach (var article in articles){ <div @key="article.Id" class="bg-gray-50 dark:bg-gray-700 rounded-xl overflow-hidden shadow-lg transition-transform transform hover:-translate-y-2 hover:shadow-2xl flex flex-col"><img class="w-full h-48 object-cover flex-shrink-0" src="@article.ImageUrl" alt="Imagen de @article.Title"><div class="p-6 flex flex-col flex-grow"><span class="text-sm font-semibold text-purple-600 dark:text-purple-400">@article.Category</span><h4 class="text-lg font-bold mt-1 text-gray-900 dark:text-white">@article.Title</h4><p class="text-gray-800 dark:text-gray-200 mt-2 text-sm flex-grow">@article.Summary</p><button class="mt-4 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 self-start">Leer más</button></div></div> }</div>
        </section>;

    private RenderFragment ChartView =>
        @<section class="flex flex-col h-full">
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-yellow-500 pb-2 flex-shrink-0">Patrón: Gráfico Simple (Barras)</h3>
            <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-inner flex-grow flex flex-col">
                <div class="flex-grow flex gap-4">
                    <div class="flex flex-col justify-between h-full text-xs text-gray-500 dark:text-gray-400 font-semibold">
                        @{ var MaxRevenueForLabels = salesData.Any() ? salesData.Max(s => s.Revenue) : 1; }
                        <span>@MaxRevenueForLabels.ToString("C0")</span>
                        <span>@((MaxRevenueForLabels * 0.75m).ToString("C0"))</span>
                        <span>@((MaxRevenueForLabels * 0.50m).ToString("C0"))</span>
                        <span>@((MaxRevenueForLabels * 0.25m).ToString("C0"))</span>
                        <span>$0</span>
                    </div>
                    <div class="relative w-full h-full border-l border-b border-gray-300 dark:border-gray-600">
                        <div class="absolute top-0 left-0 w-full h-full">
                            <div class="absolute w-full border-t border-dashed border-gray-300 dark:border-gray-600" style="bottom: 75%;"></div>
                            <div class="absolute w-full border-t border-dashed border-gray-300 dark:border-gray-600" style="bottom: 50%;"></div>
                            <div class="absolute w-full border-t border-dashed border-gray-300 dark:border-gray-600" style="bottom: 25%;"></div>
                        </div>
                        <div class="relative w-full h-full flex justify-around items-end px-2">
                            @{ var MaxRevenue = salesData.Any() ? salesData.Max(s => s.Revenue) : 1; }
                            @foreach (var sale in salesData)
                            {
                                var barHeight = (sale.Revenue / MaxRevenue * 100);
                                <div @key="sale.Month" class="flex flex-col items-center w-full group">
                                    <div class="opacity-0 group-hover:opacity-100 transition-opacity bg-black text-white text-xs rounded py-1 px-2 relative bottom-1">@sale.Revenue.ToString("C")</div>
                                    <div class="w-3/4 bg-yellow-400 hover:bg-yellow-500 rounded-t-md transition-all duration-300 ease-in-out" style="@($"height: {barHeight}%;")" title="@sale.Month"></div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="flex justify-around pl-12 pr-4 text-sm font-medium text-gray-800 dark:text-gray-200 flex-shrink-0">
                    @foreach (var sale in salesData)
                    {
                        <span class="w-full text-center">@sale.Month</span>
                    }
                </div>
            </div>
        </section>;

    private RenderFragment TabbedView =>
        @<section class="flex flex-col h-full">
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-red-500 pb-2 flex-shrink-0">Patrón: Pestañas (Tabs)</h3>
            <div class="flex-grow">
                <div class="border-b border-gray-200 dark:border-gray-700">
                    <nav class="-mb-px flex space-x-4" aria-label="Tabs">
                        @{ var tabs = new[] { ("perfil", "Perfil de Usuario"), ("notificaciones", "Notificaciones (3)"), ("configuracion", "Configuración Avanzada") };
                            foreach (var tab in tabs)
                            {
                                <a @onclick="() => SetActiveTab(tab.Item1)" class="@($"cursor-pointer whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors {(activeTab == tab.Item1 ? "border-red-500 text-red-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300")}")"> @tab.Item2 </a>
                            }
                        }
                    </nav>
                </div>
                <div class="py-6">
                    @switch (activeTab)
                    {
                        case "perfil": <div class="space-y-2 text-gray-900 dark:text-gray-100"><p><strong>Nombre:</strong> Ana Torres</p><p><strong>Rol:</strong> Administrador</p><p><strong>Miembro desde:</strong> 15 de Enero, 2022</p><p>Aquí se mostraría la información personal del usuario, su biografía, foto, y opciones para editar su perfil público.</p></div>; break;
                        case "notificaciones": <div class="space-y-2 text-gray-900 dark:text-gray-100"><p class="p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md"><strong>Nuevo Mensaje:</strong> Carlos Ruiz te ha enviado una invitación.</p><p class="p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md"><strong>Actualización:</strong> Tu reporte mensual está listo para ser revisado.</p><p class="p-2 bg-blue-50 dark:bg-blue-900/50 rounded-md"><strong>Alerta de Sistema:</strong> Mantenimiento programado para el Sábado a las 10 PM.</p></div>; break;
                        case "configuracion": <div class="space-y-2 text-gray-900 dark:text-gray-100"><p><strong>Idioma:</strong> Español (México)</p><p><strong>Tema:</strong> Automático (Modo Oscuro/Claro)</p><p>En esta sección, el usuario podría personalizar su experiencia, como el idioma, el tema de la aplicación, y gestionar las notificaciones por correo electrónico.</p></div>; break;
                    }
                </div>
            </div>
        </section>;

    private RenderFragment FilterableTable =>
        @<section class="flex flex-col h-full">
            <h3 class="text-xl font-semibold mb-4 border-b-2 border-teal-500 pb-2 flex-shrink-0">Patrón: Búsqueda y Filtro sobre Tabla</h3>
            <div class="mb-4 flex-shrink-0"><input type="text" @bind="searchTerm" @bind:event="oninput" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-teal-500 text-gray-900 dark:text-gray-100" placeholder="Buscar por nombre o categoría..." /></div>
            <div class="overflow-auto rounded-lg shadow-md flex-grow">
                <table class="w-full min-w-max text-sm text-left">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-300 sticky top-0">
                        <tr><th scope="col" class="px-6 py-3">Nombre</th><th scope="col" class="px-6 py-3">Categoría</th><th scope="col" class="px-6 py-3 text-right">Precio</th></tr>
                    </thead>
                    <tbody>@foreach (var product in FilteredProducts){ <tr @key="product.Id" class="bg-white dark:bg-gray-800 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"><td class="px-6 py-4 font-medium text-gray-900 dark:text-white">@product.Name</td><td class="px-6 py-4 text-gray-900 dark:text-gray-100">@product.Category</td><td class="px-6 py-4 text-right text-gray-900 dark:text-gray-100">@product.Price.ToString("C")</td></tr> } @if (!FilteredProducts.Any()){ <tr class="bg-white dark:bg-gray-800"><td colspan="3" class="text-center p-8 text-gray-500">No se encontraron productos que coincidan con "@searchTerm".</td></tr>}</tbody>
                </table>
            </div>
        </section>;
}

